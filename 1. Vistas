USE TINA_CAFE;
--Ventas totales por periodo:
Métrica: Suma de los precios de los productos vendidos.
Comentarios: Utilizo el JOIN para unir las tablas 'orden' y 'detalle_orden' a traves del campo id_orden con el objetivo de calcular las ventas totales (precio x cantidades).
Luego aplico un segundo JOIN para unir las tablas 'detalle_orden' y 'producto' a traves del campo id_producto con el objetivo de ordenar las ventas totales por fecha.


CREATE VIEW tina_cafe.vw_ventas_por_periodo AS
SELECT
    SUM(p.precio * do.cantidades) AS ventas_totales,
    DATE(o.fecha) AS fecha
FROM orden as o
INNER JOIN detalle_orden as do 
ON o.id_orden = do.id_orden
INNER JOIN producto as p 
ON do.id_producto = p.id_producto
GROUP BY fecha
ORDER BY fecha DESC;


--Ventas totales por producto:
Métrica: Total de unidades vendidas y la suma de ingresos por cada producto con el objetivo de visualizar que productos son mas populares.
Comentarios: Utilizo el JOIN para unir las tablas 'detalle_orden' y 'producto' a traves del campo id_producto con el objetivo de calcular las ventas totales (precio x cantidades).

CREATE VIEW tina_cafe.vw_ventas_por_producto AS
SELECT 
    p.nombre AS producto,
    SUM(do.cantidades) AS unidades_vendidas,
    SUM(p.precio * do.cantidades) AS ventas_totales
FROM detalle_orden AS do
INNER JOIN producto AS p 
ON do.id_producto = p.id_producto
GROUP BY producto
ORDER BY ventas_totales DESC;


-- Ventas por categoria
Métrica: Total de ventas y unidades por cada categoría de producto (e.g., bebidas, comidas, snacks).
Vista: Analizar qué categoría de productos tiene el mayor rendimiento de ventas.
Comentarios: Utilizo el JOIN para unir las tablas 'detalle_orden' y 'producto' a traves del campo id_producto con el objetivo de calcular las ventas totales (precio x cantidades).
Luego aplico un segundo JOIN para unir las tablas 'producto' y 'categoria_producto' a traves del campo id_categoria_producto con el objetivo 
de ordenar las ventas totales por categoria de producto.

CREATE VIEW tina_cafe.vw_ventas_por_categoria AS
SELECT 
    cp.nombre_categoria AS categoria,
    SUM(do.cantidades) AS unidades_vendidas,
    SUM(p.precio * do.cantidades) AS ventas_totales
FROM detalle_orden as do
JOIN producto as p 
ON do.id_producto = p.id_producto
JOIN categoria_producto as cp 
ON p.id_categoria_producto = cp.id_categoria_producto
GROUP BY categoria
ORDER BY ventas_totales DESC;

-- Ventas por empleado
Vista: Analizar qué empleados están generando más ingresos de acuerdo a las ordenes colocadas.
Comentarios: Utilizo el JOIN para unir las tablas 'producto' y 'detalle_orden' a traves del campo id_producto con el objetivo de calcular las ventas totales (precio x cantidades).
Luego aplico un segundo JOIN para unir las tablas 'detalle_orden' y 'empleado' a traves del campo id_empleado con el objetivo 
de ordenar las ventas totales por empleado.


CREATE VIEW tina_cafe.vw_ventas_por_empleado AS
SELECT 
    e.nombre AS empleado,
    SUM(p.precio * do.cantidades) AS ventas_totales
FROM producto as p
JOIN detalle_orden as do 
ON p.id_producto = do.id_producto
JOIN empleado as e 
ON do.id_empleado = e.id_empleado
GROUP BY empleado
ORDER BY ventas_totales DESC;





